version: 2
# Environment variables required by the project:
# GIT_EMAIL
# GIT_NAME
# SITE_URL
# PANTHEON_TOKEN
# PANTHEON_GIT_REPO
# PANTHEON_PROJECT_NAME
# PANTHEON_WEB_AUTH_USER
# PANTHEON_WEB_AUTH_PASS
# LHCI_GITHUB_APP_TOKEN

jobs:
  build:
    docker:
      - image: kporras07/docker-drupal-nginx:php-7.4.x
      - image: mariadb:10.5
        environment:
          MYSQL_DATABASE: drupal
          MYSQL_ROOT_PASSWORD: drupal
    working_directory: /var/www/local_site
    steps:
      - run: apt-get update -y && apt-get install python -y
      - run: echo 127.0.0.1 local_site.local | tee -a /etc/hosts
      - checkout
      - add_ssh_keys:
      - restore_cache:
          keys:
            - npm-cache-{{ checksum "package.json" }}
      - restore_cache:
          keys:
            - composer-cache-{{ checksum "composer.lock" }}
      - run: npm install
      - save_cache:
          key: npm-cache-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          name: Install Composer
          command: |
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" && \
            php -r "copy('https://composer.github.io/installer.sig', 'composer-setup.sig');" && \
            php -r "if (hash_file('SHA384', 'composer-setup.php') === trim(file_get_contents('composer-setup.sig'))) { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;" && \
            php composer-setup.php && \
            php -r "unlink('composer-setup.php');"
            mv composer.phar /usr/bin/composer
      - run:
          name: Getting required PHP packages
          command: |
            cp ./.circleci/settings.secret.php ./settings/
            composer install
      - save_cache:
          key: composer-cache-{{ checksum "composer.lock" }}
          paths:
            - vendor
      - run:
          name: Coding Standards Linters
          command: |
            ./node_modules/.bin/gulp phplint
            ./node_modules/.bin/gulp drupalcs
            ./node_modules/.bin/gulp eslint
      - run:
          name: Install and login terminus
          command: |
            mkdir terminus && cd terminus
            curl -O https://raw.githubusercontent.com/pantheon-systems/terminus-installer/master/builds/installer.phar && php installer.phar install
            ln -s /var/www/local_site/terminus/vendor/bin/terminus /usr/bin/terminus
            terminus auth:login --machine-token=$PANTHEON_TOKEN
      - run:
          name: Configure Nginx
          command: |
            cp ./.circleci/local_site /etc/nginx/sites-available/default
      - run:
          name: Build site from scratch
          command: |
            chmod 777 -R ./web/sites/default/files
            /usr/bin/env PHP_OPTIONS="-d sendmail_path=`which true`"
            echo "Installing the site..."
            ./vendor/bin/drush si bloom --existing-config -y
            ./vendor/bin/drush cim -y
            ./vendor/bin/drush cim -y
            if [ -f ./themes/custom/CUSTOMTHEME/package.json ]; then
              cd ./themes/custom/CUSTOMTHEME
              if [ ! -d ./node_modules ]; then npm install; fi
              npm run build
              cd /var/www/local_site
            fi
            echo "Cleaning cache..."
            ./vendor/bin/drush cr
      - run:
          name: Build site from DB
          command: |
            git config --global user.email $GIT_EMAIL
            git config --global user.name $GIT_NAME
            echo 'Host *' >> /root/.ssh/config
            echo '   StrictHostKeyChecking no' >> /root/.ssh/config
            terminus backup:get $PANTHEON_PROJECT_NAME.live --element=db --to=./database.sql.gz
            echo "Drop Database..."
            ./vendor/bin/drush sql:drop -y
            echo "Import database..."
            gunzip -c database.sql.gz | ./vendor/bin/drush sqlc
            echo "Update database..."
            ./vendor/bin/drush updb --no-cache-clear -y
            echo "Cleaning cache..."
            ./vendor/bin/drush cr
            echo "Importing config..."
            ./vendor/bin/drush config:set "system.site" uuid "$SITE_UUID" -y
            ./vendor/bin/drush cr
            ./vendor/bin/drush cim -y
            ./vendor/bin/drush cim -y
            echo "Sanitizing database..."
            ./vendor/bin/drush sqlsan --sanitize-password=admin -y
            echo "Cleaning cache..."
            ./vendor/bin/drush cr
      - run:
          name: Lighthouse
          command: |
            /etc/init.d/nginx start > nginx.log &
            /etc/init.d/php7.3-fpm start > php7.3-fpm.log &
            ./node_modules/.bin/lhci autorun --collect.url=http://local_site.local
      - persist_to_workspace:
          root: /var/www/
          paths: local_site

  deploy-dev:
    docker:
      - image: kporras07/docker-drupal-nginx:php-7.4.x
    working_directory: /var/www/local_site
    steps:
      - attach_workspace:
          at: /var/www
      - add_ssh_keys:
      - run:
          name: Install Composer
          command: |
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" && \
            php -r "copy('https://composer.github.io/installer.sig', 'composer-setup.sig');" && \
            php -r "if (hash_file('SHA384', 'composer-setup.php') === trim(file_get_contents('composer-setup.sig'))) { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;" && \
            php composer-setup.php && \
            php -r "unlink('composer-setup.php');"
            mv composer.phar /usr/bin/composer
      - run: composer install
      - run:
          name: Login terminus
          command: |
            ln -s /var/www/local_site/terminus/vendor/bin/terminus /usr/bin/terminus
            terminus auth:login --machine-token=$PANTHEON_TOKEN
      - run:
          name: Deploy commands
          no_output_timeout: 20m
          command: |
            git config --global user.email $GIT_EMAIL
            git config --global user.name $GIT_NAME
            echo 'Host *' >> /root/.ssh/config
            echo '   StrictHostKeyChecking no' >> /root/.ssh/config
            terminus connection:set $PANTHEON_PROJECT_NAME.dev git
            ./scripts/circleci/deploy.sh master "Auto deploy triggered from master branch"
            terminus connection:set $PANTHEON_PROJECT_NAME.dev sftp
            terminus drush $PANTHEON_PROJECT_NAME.dev -- si bloom --account-pass=admin --existing-config -y
            terminus connection:set $PANTHEON_PROJECT_NAME.dev git
            terminus drush $PANTHEON_PROJECT_NAME.dev -- cr
            terminus drush $PANTHEON_PROJECT_NAME.dev -- cim -y
            terminus drush $PANTHEON_PROJECT_NAME.dev -- cr

  deploy-test:
    docker:
      - image: kporras07/docker-drupal-nginx:php-7.4.x
    working_directory: /var/www/local_site
    steps:
      - add_ssh_keys:
      - run:
          name: Install and login terminus
          command: |
            mkdir terminus && cd terminus
            curl -O https://raw.githubusercontent.com/pantheon-systems/terminus-installer/master/builds/installer.phar && php installer.phar install
            ln -s /var/www/local_site/terminus/vendor/bin/terminus /usr/bin/terminus
            terminus auth:login --machine-token=$PANTHEON_TOKEN
      - run:
          name: Deploy commands
          command: |
            git config --global user.email $GIT_EMAIL
            git config --global user.name $GIT_NAME
            echo 'Host *' >> /root/.ssh/config
            echo '   StrictHostKeyChecking no' >> /root/.ssh/config
            terminus env:deploy $PANTHEON_PROJECT_NAME.test --note "Autodeploy from Circle" -y
            terminus env:clone-content $PANTHEON_PROJECT_NAME.live test -y
            terminus drush $PANTHEON_PROJECT_NAME.test -- cr
            terminus drush $PANTHEON_PROJECT_NAME.test -- sqlsan --sanitize-password=test -y
            terminus drush $PANTHEON_PROJECT_NAME.test -- updb -y
            terminus drush $PANTHEON_PROJECT_NAME.test -- cr
            terminus drush $PANTHEON_PROJECT_NAME.test -- cim -y
            terminus drush $PANTHEON_PROJECT_NAME.test -- cr

  deploy-live:
    docker:
      - image: kporras07/docker-drupal-nginx:php-7.4.x
    working_directory: /var/www/local_site
    steps:
      - add_ssh_keys:
      - run:
          name: Install and login terminus
          command: |
            mkdir terminus && cd terminus
            curl -O https://raw.githubusercontent.com/pantheon-systems/terminus-installer/master/builds/installer.phar && php installer.phar install
            ln -s /var/www/local_site/terminus/vendor/bin/terminus /usr/bin/terminus
            terminus auth:login --machine-token=$PANTHEON_TOKEN
      - run:
          name: Deploy commands
          command: |
            git config --global user.email $GIT_EMAIL
            git config --global user.name $GIT_NAME
            echo 'Host *' >> /root/.ssh/config
            echo '   StrictHostKeyChecking no' >> /root/.ssh/config
            terminus backup:create $PANTHEON_PROJECT_NAME.live -y
            terminus env:deploy $PANTHEON_PROJECT_NAME.live --note "Autodeploy from Circle" -y
            terminus drush $PANTHEON_PROJECT_NAME.live -- updb -y
            terminus drush $PANTHEON_PROJECT_NAME.live -- cim -y
            terminus drush $PANTHEON_PROJECT_NAME.live -- cr

  deploy-multidev:
    docker:
      - image: kporras07/docker-drupal-nginx:php-7.4.x
    working_directory: /var/www/local_site
    steps:
      - attach_workspace:
          at: /var/www
      - add_ssh_keys:
      - run:
          name: Install Composer
          command: |
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');" && \
            php -r "copy('https://composer.github.io/installer.sig', 'composer-setup.sig');" && \
            php -r "if (hash_file('SHA384', 'composer-setup.php') === trim(file_get_contents('composer-setup.sig'))) { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;" && \
            php composer-setup.php && \
            php -r "unlink('composer-setup.php');"
            mv composer.phar /usr/bin/composer
      - run: composer install
      - run:
          name: Login terminus
          command: |
            ln -s /var/www/local_site/terminus/vendor/bin/terminus /usr/bin/terminus
            terminus auth:login --machine-token=$PANTHEON_TOKEN
      - run:
          name: Create multidev environment
          command: |
            NEWBRANCH=$CIRCLE_BRANCH
            LENGTH=${#NEWBRANCH}
            if [ LENGTH > 10 ] ; then NEWBRANCH=${NEWBRANCH:8:9} ; fi
            NEWBRANCH=${NEWBRANCH//-/}
            NEWBRANCH=${NEWBRANCH,,}
            terminus multidev:create $PANTHEON_PROJECT_NAME.live $NEWBRANCH || true
      - run:
          name: Deploy commands
          command: |
            NEWBRANCH=$CIRCLE_BRANCH
            LENGTH=${#NEWBRANCH}
            if [ LENGTH > 10 ] ; then NEWBRANCH=${NEWBRANCH:8:9} ; fi
            NEWBRANCH=${NEWBRANCH//-/}
            NEWBRANCH=${NEWBRANCH,,}
            git config --global user.email $GIT_EMAIL
            git config --global user.name $GIT_NAME
            echo 'Host *' >> /root/.ssh/config
            echo '   StrictHostKeyChecking no' >> /root/.ssh/config
            ./scripts/circleci/deploy.sh $NEWBRANCH "Auto deploy triggered from master branch"
            terminus drush $PANTHEON_PROJECT_NAME.$NEWBRANCH -- cr
            terminus drush $PANTHEON_PROJECT_NAME.$NEWBRANCH -- sqlsan -y
            terminus drush $PANTHEON_PROJECT_NAME.$NEWBRANCH -- updb -y
            terminus drush $PANTHEON_PROJECT_NAME.$NEWBRANCH -- cim -y
            terminus drush $PANTHEON_PROJECT_NAME.$NEWBRANCH -- cr
            terminus lock:enable $PANTHEON_PROJECT_NAME.$NEWBRANCH -- $PANTHEON_WEB_AUTH_USER $PANTHEON_WEB_AUTH_PASS
            echo "If everything worked, go to http://$NEWBRANCH-$PANTHEON_PROJECT_NAME.pantheonsite.io"

  lighthouse-on-live:
    docker:
      - image: circleci/node:10.16-browsers
    working_directory: ~/local_site
    steps:
      - checkout
      - run: sudo npm install -g @lhci/cli@0.4.x
      - run: lhci autorun --collect.url=$SITE_URL

workflows:
  version: 2
  build-deploys:
    jobs:
      - build
      - deploy-dev:
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy-test:
          requires:
            - deploy-dev
      - deploy-live-hold:
          type: approval
          requires:
            - deploy-test
      - deploy-live:
          requires:
            - deploy-live-hold
      - deploy-multidev-hold:
          type: approval
          requires:
            - build
          filters:
            branches:
              only:
                - /feature\/.*/
      - deploy-multidev:
          requires:
            - deploy-multidev-hold
      - lighthouse-on-live:
          requires:
            - deploy-live
          filters:
            branches:
              only: master
